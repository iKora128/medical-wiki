// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Article {
  id          String    @id @default(cuid())
  slug        String    @unique
  title       String
  content     String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  references  String    @default("[]")
  status      String    @default("draft")
  author      User      @relation(fields: [authorId], references: [id])
  authorId    String
  comments    Comment[]
  bookmarks   Bookmark[]
  shares      Share[]
  tags        Tag[]
}

model Tag {
  id        String     @id @default(cuid())
  name      String     @unique
  articles  Article[]
  questions Question[] @relation("QuestionToTag")
}

model User {
  id        String    @id @default(cuid())
  email     String    @unique
  name      String?
  role      String    @default("USER")
  createdAt DateTime  @default(now())
  
  profile   Profile?
  articles  Article[]
  comments  Comment[]
  bookmarks Bookmark[]
  shares    Share[]
  
  questions Question[]
  answers   Answer[]
}

model Profile {
  id          String    @id @default(cuid())
  userId      String    @unique
  user        User      @relation(fields: [userId], references: [id])
  avatarUrl   String?
  bio         String?   // 自己紹介
  specialty   String?   // 専門分野
  occupation  String?   // 職業
  website     String?   // ウェブサイト
  updatedAt   DateTime  @updatedAt
}

model Bookmark {
  id        String   @id @default(cuid())
  userId    String
  articleId String
  createdAt DateTime @default(now())
  
  user      User     @relation(fields: [userId], references: [id])
  article   Article  @relation(fields: [articleId], references: [id])

  @@unique([userId, articleId])
}

model Question {
  id          String    @id @default(cuid())
  title       String
  content     String
  userId      String
  status      String    @default("OPEN") // OPEN, CLOSED
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  user        User      @relation(fields: [userId], references: [id])
  answers     Answer[]
  tags        Tag[]     @relation("QuestionToTag")
}

model Answer {
  id          String    @id @default(cuid())
  content     String
  userId      String
  questionId  String
  isAccepted  Boolean   @default(false)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  user        User      @relation(fields: [userId], references: [id])
  question    Question  @relation(fields: [questionId], references: [id])
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  createdAt DateTime @default(now())
  article   Article  @relation(fields: [articleId], references: [id])
  articleId String
  author    User     @relation(fields: [authorId], references: [id])
  authorId  String
}

model Share {
  id        String   @id @default(cuid())
  userId    String
  articleId String
  platform  String   // "twitter", "facebook" など
  createdAt DateTime @default(now())
  article   Article  @relation(fields: [articleId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
} 